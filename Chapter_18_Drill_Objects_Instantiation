#include<iostream>
#include<string>
#include<vector>
#include<algorithm>
#include<cmath>
#include<fstream>
#include<sstream>


using namespace std;

/*
* These is the drill from Chapter 18.
* This details what happens when objects are created and destroyed.
*/


struct X {
	int val;

	void out(const string& s, int nv) {
		cerr << this << "->" << s << ": " << val << " (" << nv << ")\n";
	}

	X() {out("X()", 0); val = 0;} //Default Constructor

	X(int v) { out("X(int)", v); val = v;}

	X(const X& x) { out("X(X&)", x.val); val = x.val;} //Copy Constructor

	X& operator=(const X& a) {
		out("X::operator=()", a.val); val=a.val; return *this;} //Copy Assignment

	~X() {out("~X()", 0);} //Destructor
};

X glob(2); //A global variable

X copy(X a) { return a; }

X copy2(X a) { X aa = a; return aa; }

X& ref_to(X& a) { return a; }

X* make(int i) { X a(i); return new X(a); }

struct XX { X a; X b; };

int main() {
	X loc(4);

	X loc2 = loc;

	loc = X(5);

	loc2 = copy(loc);

	loc2 = copy2(loc);

	X loc3(6);

	X& r = ref_to(loc);

	delete make(7);

	delete make(8);

	vector<X> v(4);

	XX loc4;

	X* p = new X(9); //An X on the free store.

	delete p;

	X* pp = new X[5]; //An array of Xs on the free store.

	delete[] pp;
	
	return 0;
}
